{% extends "home.j2" %}
{% block title %}
{{ query if query else "Search"}}
{% endblock %}

{% set border_pages = 2 %}
{% set index_type = engine.split('-')[0] %}
{% set dataset = engine.split('-')[1] %}

{% block content %}
<ul class="tab" id="query-type-tabs">
  <li class="tab-item {% if query_type != "entity" %} active {% endif %}" data-query-type="keyword">
    <a href="#">Keyword Query</a>
  </li>
  <li class="tab-item {% if query_type == "entity" %} active {% endif %}" data-query-type="entity">
    <a href="#">Entity Query</a>
  </li>
</ul>

<form class="form-horizontal" id="search-form">
  <input type="hidden" id="query-type" name="type" value="{{ query_type or "keyword" }}"/>
  <div class="form-group">
    <div class="column">
      <div class="input-group">
        <select class="form-select" id="task" name="task">
          <option value="document_retrieval"
            {% if task == 'document_retrieval' %} selected="selected" {% endif %}>Documents</option>
          <option value="entity_retrieval"
            {% if task == 'entity_retrieval' %} selected="selected" {% endif %}>Entities</option>
          <option value="term_retrieval"
            {% if task == 'term_retrieval' %} selected="selected" {% endif %}>Terms</option>
        </select>

        <!-- Keyword query -->
        <input class="form-input query {% if query_type == "entity" %} d-hide {% endif %}" type="text" id="keyword-query"
          placeholder="Type keywords here"
          {% if query_type != "entity" %} name="query" {% endif %}
          value="{{ query if query and query_type != "entity" }}" />

        <!-- Entity query START -->
        <div class="form-autocomplete query {% if query_type != "entity" %} d-hide {% endif %}">
          <input type="hidden" id="entity-query"
            {% if query_type == "entity" %} name="query" {% endif %}
            value="{{ query if query and query_type == "entity" }}"/>
          <!-- autocomplete input container -->
          <div class="form-autocomplete-input form-input">
            {% if query and query_type == "entity" %}
            {% for entity in query.split("||") %}
            <!-- autocomplete chips -->
            <div class="chip">
              {{ entity }}
              <a href="#" class="btn btn-clear" aria-label="Close" role="button"></a>
            </div>
            {% endfor %}
            {% endif %}

            <!-- autocomplete real input box -->
            <div class="has-icon-left">
              <input class="form-input" type="text" id="entity-query-input" autocomplete="off"
                placeholder="Type entity name here">
              <i class="form-icon loading d-none" id="entity-list-loading"></i>
            </div>
          </div>

          <!-- autocomplete suggestion list -->
          <ul class="menu d-hide">
            <!-- menu list items -->
            <!--li class="menu-item">
              <a href="#">
                <div class="tile">
                  <span class="text-primary text-bold">Met</span>allica
                </div>
              </a>
            </li-->
          </ul>
        </div>
        <!-- Entity query END -->

        <button class="btn btn-primary btn input-group-btn">Search</button>
      </div>
    </div>

    <div class="column col-auto">
      <label class="form-switch">
        <input type="checkbox" id="debug" name="debug" {% if debug == 'on' %} checked="checked" {% endif %}/>
        <i class="form-icon"></i> Learn mode
      </label>
    </div>
  </div>

  {% include 'search/engine.j2' %}
</form>

{% if error %}

<div class="container">
  <div class="empty">
    <div class="empty-icon">
      <i class="icon icon-2x icon-stop"></i>
    </div>
    <h4 class="empty-title">Error</h4>
    <p class="empty-subtitle">{{ error }}</p>
  </div>
</div>

{% else %}

<div class="container">
  <small>{{ numDocs }} results ({{ time|round(2) }} seconds)</small>
</div>

<br>

{% if debug == 'on' %}

{% include 'search/debug.j2' %}

{% else %}

{% include 'search/results.j2' %}

{% endif %}

{% endif %}



<br>
<br>

<script type="text/javascript">
  (function() {
    document.getElementById("keyword-query").focus();

    // Avoid anchor hash action in tabs
    $(".tab-item a").on("click", function(e) {
      e.preventDefault();
      return true;
    });

    // Query type selection tabs
    $("#query-type-tabs .tab-item").on("click", function(e) {
      let queryType = $(this).data("query-type");
      $(".tab-item").removeClass("active");
      $(this).addClass("active");

      $(".query").addClass("d-hide");
      if (queryType === "entity") {
        $("#entity-query").parent(".form-autocomplete").removeClass("d-hide");
        document.getElementById("entity-query-input").focus();
        $("#query-type").val("entity");
        $("#keyword-query").removeAttr("name");
        $("#entity-query").attr("name", "query");
      } else {
        // Default is keyword
        $("#keyword-query").removeClass("d-hide");
        document.getElementById("keyword-query").focus();
        $("#query-type").val("keyword");
        $("#keyword-query").attr("name", "query");
        $("#entity-query").removeAttr("name");
      }
    });

    function closeEntityQueryMenu() {
      $(".form-autocomplete-input .chip.highlighted").removeClass("highlighted");
      $(".form-autocomplete .menu").addClass("d-hide");
    }

    function stripSpan(item) {
      var $span = $(item).find("span");
      var spanText = $span.text();
      return $span.before(spanText).remove();
    }

    $("body").on("click", function(e) {
      closeEntityQueryMenu();
    });

    function addSelectedEntity() {
      let selectedEntity = $(".form-autocomplete .menu .menu-item a.active .tile").text();

      if (selectedEntity) {
        var entityName = selectedEntity;
        closeEntityQueryMenu();
      } else {
        var entityName = $("#entity-query-input").val();
      }

      if (entityName == null || entityName.trim() == "") {
        return;
      }

      let $closeButton = $('<a>')
        .addClass("btn btn-clear")
        .attr("href", "#")
        .attr("aria-label", "Close")
        .attr("role", "button");

      let $chip = $("<div>")
        .addClass("chip")
        .append(entityName)
        .append($closeButton);

      if ($(".form-autocomplete-input .chip").length == 0) {
        $(".form-autocomplete-input").prepend($chip);
      } else {
        $(".form-autocomplete-input .chip").last().after($chip);
      }

      $("#entity-query-input").val("");
      $(".menu-item a.active").removeClass("active");
    }

    // Click on entity name from autocomplete
    $("body").on("click", ".form-autocomplete .menu-item a", function(e) {
      $(".form-autocomplete .menu-item a").removeClass("active");
      $(this).addClass("active");
      addSelectedEntity();
    });

    function autocomplete(substring, callback) {
      var engine = $("#engine").val();
      $("#entity-list-loading").removeClass("d-none");
      $.getJSON("{{ url('autocomplete') }}?engine=" + engine + "&substring=" + substring, callback);
    }

    $("#entity-query-input").on("keydown", function(e) {
      if (e.keyCode == 13 && $(this).val() != "") {
        return false;
      }
      return true;
    });

    // Entity name input control
    var autoCompleteEvent = null;
    $("#entity-query-input").on("keyup", function(e) {
      var pressedEnter = false;

      switch (e.keyCode) {
        case 8: // BACKSPACE
          var inputVal = $("#entity-query-input").val();
          let $lastChip = $(".form-autocomplete-input .chip").last();
          if (inputVal == "") {
            if ($lastChip.hasClass("highlighted")) {
              $lastChip.remove();
            } else {
              $lastChip.addClass("highlighted");
            }
          }
          break;

        case 13: // ENTER
          addSelectedEntity();
          pressedEnter = true;
          break;

        case 27: // ESCAPE
          closeEntityQueryMenu();
          break;

        case 38: // UP
          var $active = $(".menu-item a.active").first();
          if ($active.length == 0) {
            $(".menu-item").last().find("a").addClass("active");
          } else {
            let $a = $(".menu-item a.active").parents("li").prev("li").find("a");

            if ($a.length == 0) {
              $a = $(".menu-item a").last();
            }

            $(".menu-item a").removeClass("active");
            $a.addClass("active");
          }
          break;

        case 40: // DOWN
          var $active = $(".menu-item a.active").first();
          if ($active.length == 0) {
            $(".menu-item").first().find("a").addClass("active");
          } else {
            let $a = $(".menu-item a.active").parents("li").next("li").find("a");

            if ($a.length == 0) {
              $a = $(".menu-item a").first();
            }

            $(".menu-item a").removeClass("active");
            $a.addClass("active");
          }
          break;
      }

      var inputText = $("#entity-query-input").val();
      if (!(e.keyCode >= 37 && e.keyCode <= 40) && inputText.trim() != "") {
        if (autoCompleteEvent) {
          autoCompleteEvent.abort();
          $("#entity-list-loading").addClass("d-none");
        }

        autocompleteEvent = autocomplete(inputText, function(data) {
          $(".form-autocomplete .menu").removeClass("d-hide");
          $(".form-autocomplete .menu").empty();
          if (data.error || data.matches.length < 1) {
            $(".form-autocomplete .menu").addClass("d-hide");
          } else {
            for (let i = 0; i < data.matches.length; i++) {
              let $tile = $("<div>")
                .addClass("tile")
                .append(data.matches[i]);

              let $a = $("<a>")
                .attr("href", "#")
                .append($tile);

              let $menuItem = $("<li>")
                .addClass("menu-item")
                .append($a);

              $(".form-autocomplete .menu").append($menuItem);
            }

            // Make matches bold
            $(".form-autocomplete .menu .menu-item a .tile").forEach(function(item) {
              stripSpan(item);

              var itemText = $(item).text().trim();
              if (itemText != "" && inputText != "" && itemText.toLowerCase().includes(inputText.toLowerCase())) {
                var html = itemText.replace(
                  new RegExp("(" + inputText + ")", "ig"),
                  '<span class="text-primary text-bold">$1</span>');
                $(item).empty().append($("<span>" + html + "</span>"));
              }
            });
          }
          $("#entity-list-loading").addClass("d-none");
        });
      }

      return !pressedEnter;
    });

    // Entity chip delete
    $(".form-autocomplete").on("click", ".chip a[aria-label='Close']", function(e) {
      $(this).parent(".chip").remove();
    });

    $("#search-form").on("submit", function(e) {
      if ($("#query-type").val() == "entity") {
        var entityQuery = $(".query .chip").map(function(item) { return $(this).text().trim(); }).get().join("||");
        $("#entity-query").val(entityQuery);
      }
    });
  })();
</script>
{% endblock %}
