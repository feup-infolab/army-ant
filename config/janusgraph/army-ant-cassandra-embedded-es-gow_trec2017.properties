# JanusGraph configuration sample: embedded Cassandra & Elasticsearch
#
# This file starts a Cassandra daemon and an Elasticsearch daemon
# inside the same JVM running JanusGraph.  The daemons are started
# automatically.  This is sometimes convenient for testing.  Large
# production deployments typically opt to provision and configure
# these services separately instead of embedding as shown in this
# file.
#
# The embedded Cassandra backend is not officially publicly supported.
# The cassandrathrift and astyanax backends -- which connect to
# Cassandra over its Thrift API -- are supported alternatives.w

# The primary persistence provider used by JanusGraph.  This is required. 
# It should be set one of JanusGraph's built-in shorthand names for its
# standard storage backends (shorthands: berkeleyje, cassandrathrift,
# cassandra, astyanax, embeddedcassandra, hbase, inmemory) or to the full
# package and classname of a custom/third-party StoreManager
# implementation.

gremlin.graph=org.janusgraph.core.JanusGraphFactory

# Default:    (no default value)
# Data Type:  String
# Mutability: LOCAL
storage.backend=embeddedcassandra

# Path to a configuration file for those storage backends which
# require/support a single separate config file.
#
# Default:    (no default value)
# Data Type:  String
# Mutability: LOCAL
storage.conf-file=file:///opt/janusgraph-0.1.1-hadoop2/conf/cassandra/cassandra-gow_trec2017.yaml
#storage.conf-file=cassandra/cassandra-gow_trec2017.yaml

# Whether to enable JanusGraph's database-level cache, which is shared
# across all transactions. Enabling this option speeds up traversals by
# holding hot graph elements in memory, but also increases the likelihood
# of reading stale data.  Disabling it forces each transaction to
# independently fetch graph elements from storage before reading/writing
# them.
#
# Default:    false
# Data Type:  Boolean
# Mutability: MASKABLE
cache.db-cache = true

# How long, in milliseconds, database-level cache will keep entries after
# flushing them.  This option is only useful on distributed storage
# backends that are capable of acknowledging writes without necessarily
# making them immediately visible.
#
# Default:    50
# Data Type:  Integer
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in
# JanusGraph's storage backend.  After starting the database for the first
# time, this file's copy of this setting is ignored.  Use JanusGraph's
# Management System to read or modify this value after bootstrapping.
cache.db-cache-clean-wait = 0

# Default expiration time, in milliseconds, for entries in the
# database-level cache. Entries are evicted when they reach this age even
# if the cache has room to spare. Set to 0 to disable expiration (cache
# entries live forever or until memory pressure triggers eviction when set
# to 0).
#
# Default:    10000
# Data Type:  Long
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in
# JanusGraph's storage backend.  After starting the database for the first
# time, this file's copy of this setting is ignored.  Use JanusGraph's
# Management System to read or modify this value after bootstrapping.
cache.db-cache-time = 0

# Size of JanusGraph's database level cache.  Values between 0 and 1 are
# interpreted as a percentage of VM heap, while larger values are
# interpreted as an absolute size in bytes.
#
# Default:    0.3
# Data Type:  Double
# Mutability: MASKABLE
cache.db-cache-size = 0.25

# The indexing backend used to extend and optimize JanusGraph's query
# functionality. This setting is optional.  JanusGraph can use multiple
# heterogeneous index backends.  Hence, this option can appear more than
# once, so long as the user-defined name between "index" and "backend" is
# unique among appearances.Similar to the storage backend, this should be
# set to one of JanusGraph's built-in shorthand names for its standard
# index backends (shorthands: lucene, elasticsearch, es, solr) or to the
# full package and classname of a custom/third-party IndexProvider
# implementation.
#
# Default:    elasticsearch
# Data Type:  String
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in
# JanusGraph's storage backend.  After starting the database for the first
# time, this file's copy of this setting is ignored.  Use JanusGraph's
# Management System to read or modify this value after bootstrapping.
index.gow_trec2017.backend=elasticsearch

# Directory to store index data locally
#
# Default:    (no default value)
# Data Type:  String
# Mutability: MASKABLE
index.gow_trec2017.directory=../db/es

# The Elasticsearch node.client option is set to this boolean value, and
# the Elasticsearch node.data option is set to the negation of this value.
# True creates a thin client which holds no data.  False creates a regular
# Elasticsearch cluster node that may store data.
#
# Default:    true
# Data Type:  Boolean
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in
# JanusGraph's storage backend.  After starting the database for the first
# time, this file's copy of this setting is ignored.  Use JanusGraph's
# Management System to read or modify this value after bootstrapping.
index.gow_trec2017.elasticsearch.client-only=false

# On the legacy config track, this option chooses between starting a
# TransportClient (false) or a Node with JVM-local transport and local
# data (true).  On the interface config track, this option is considered
# by (but optional for) the Node client and ignored by the
# TransportClient.  See the manual for more information about ES config
# tracks.
#
# Default:    false
# Data Type:  Boolean
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in
# JanusGraph's storage backend.  After starting the database for the first
# time, this file's copy of this setting is ignored.  Use JanusGraph's
# Management System to read or modify this value after bootstrapping.
index.gow_trec2017.elasticsearch.local-mode=true

index.gow_trec2017.index-name=gow_trec2017

# Or connect to an already-running ES process on localhost
#index.search.backend=elasticsearch
#index.search.hostname=127.0.0.1
#index.search.elasticsearch.client-only=true

storage.batch-loading=true
#schema.default=none
#query.fast-property=true
